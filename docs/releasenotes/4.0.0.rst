Robotidy 4.0.0
=========================================

Major release which contains multiple improvements for external transformers. There are also backward incompatible
changes, including removing ``section`` option from ``NormalizeSeparators`` (replaced with ``skip_sections``). We have
also added following new transformers:

 - RemoveEmptyValues
 - GenerateDocumentation

You can install the latest available version by running::

    pip install --upgrade robotframework-tidy

or to install exactly this version::

    pip install robotframework-tidy==4.0.0

Rerun the transformation in place
----------------------------------

Because of high independence of each transformer, Robotidy runs them in specific order to obtain predictable results.
But sometimes the subsequent transformer modifies the file to the point that it requires another run of Robotidy.
Good example would be one transformer that replaces the deprecated syntax - but new syntax is inserted using standard
whitespace. If there is transformer that aligns this whitespace according to special rules (like ``AlignKeywordsSection``)
we need to run Robotidy again to format this whitespace.

This could be inconvenient in some cases where user had to rerun Robotidy without knowing why. That's why Robotidy
now has new option ``reruns`` that allows to define limit of how many extra reruns Robotidy can perform if the
file keeps changing after the transformation. The default is ``0`` (original behaviour). Recommended value is ``3``
although in vast majority of cases one extra run should suffice (and only in cases described above).

Example usage::

    > robotidy --reruns 3 --diff test.robot

Note that if you enable it, it can double the execution time of Robotidy (if the file was modified, it will be
transformed again to check if next transformation does not further modify the file). It should be not a problem because
Robotidy is fast enough but report any issues with this feature.

Load custom transformers together with defaults
------------------------------------------------

Previously Robotidy only supported importing custom transformers with ``--transform`` option. This option disables
any other transformer not listed with ``--transform``. That's why if user would run following::

    > robotidy --transform MyCustomClass.py test.robot

It would disable all default transformers and only run MyCustomClass.
This release introduces new option ``--load-transformer`` which imports custom transformers on top of the default ones::

    > robotidy --load-transformer MyCustomClass.py test.robot

It is also possible to pass transformer configuration either using this option or through ``--configure``::

    > robotidy -c ExtClass1.py:param=value --load-transformer ExtClass2.py:param2=value test.robot

Load custom transformers from the module
-------------------------------------------

It is now possible to load transformers from the Python module. Importing transformers from module works similarly
to how custom libraries are imported in Robot Framework. If the file has the same name as transformer, it will
be auto-imported. The following command::

    > robotidy --load-transformer CustomClass.py

will load ``class CustomClass`` from the ``CustomClass.py`` file. It's the old behaviour and it will not change.

If the file does not contain class with the same name, Robotidy will load all transformers from the file (using the
same logic as importing the module).

If you use directory or Python module, Robotidy will check the ``__init__.py`` file inside. By default it will import
all transformers from the ``__init__.py`` file::

    from robotidy.transformers import Transformer

    from other_file import TransformerB

    class TransformerA(Transformer)

will import ``TransformerB`` and ``TransformerA`` (it doesn't need to be defined in ``__init__.py``, it's enough that it's imported).

The order of defining will be used as execution order. If you want to use different order you can define ``TRANSFORMERS``
list in the ``__init__.py``::

    TRANSFORMERS = [
        "TransformerA",
        "TransformerB"
    ]

New skip option: --skip-sections (#388 #475)
--------------------------------------------

It is now possible to skip formatting of whole sections with new ``--skip-sections`` option.

Currently supported in::

    AddMissingEnd
    DiscardEmptySections
    NormalizeAssignments
    NormalizeNewLines
    NormalizeSectionHeaderName
    NormalizeSeparators
    ReplaceEmptyValues
    SplitTooLongLine

Support for other transformers can be added if needed.

You can configure which section to skip using comma separated list of section names: settings,variables,testcases,tasks,keywords,comments.
Like other skip options it can be used either for all transformers with ``--skip-sections``, or only for configured
transformer::

    > robotidy --configure DiscardEmptySections:skip_sections=variables src

Since this option provides the same functionality as ``section`` argument in ``NormalizeSeparators``, the ``section``
option was removed. Note that to replicate the same behaviour, you now need to list sections that you want to skip
rather than the sections you want to format. For example following command::

    > robotidy -c NormalizeSeparators:sections=settings,variables,testcases,comments src

Is now equivalent of::

    > robotidy -c NormalizeSeparators:skip_sections=keywords

New transformer ReplaceEmptyValues (#474)
------------------------------------------

This new, enabled by default transformer replaces empty values with ``${EMPTY}`` variable.

Empty variables, lists or elements in the list can be defined in the following way::

    *** Variables ***
    ${EMPTY_VALUE}
    @{EMPTY_LIST}
    &{EMPTY_DICT}
    @{LIST_WITH_EMPTY}
    ...    value
    ...
    ...    value3

To be more explicit, this transformer replace such values with ``${EMPTY}`` variables::

    *** Variables ***
    ${EMPTY_VALUE}    ${EMPTY}
    @{EMPTY_LIST}     @{EMPTY}
    &{EMPTY_DICT}     &{EMPTY}
    @{LIST_WITH_EMPTY}
    ...    value
    ...    ${EMPTY}
    ...    value3

New transformer GenerateDocumentation (#311)
--------------------------------------------

Transformer that allows you to generate keyword documentation stubs based on the keyword data such as
name, arguments or returned values. It uses Jinja templating internally and allows to define your own
documentation templates. With default template (Google docstring) and following code::

    *** Keywords ***
    Keyword
        [Arguments]    ${arg}
        ${var}   ${var2}    Step
        RETURN    ${var}    ${var2}

it will generate::

    *** Keywords ***
    Keyword
        [Documentation]
        ...
        ...    Arguments:
        ...        ${arg}:
        ...
        ...    Returns:
        ...        ${var}
        ...        ${var2}
        [Arguments]    ${arg}
        ${var}   ${var2}    Step
        RETURN    ${var}    ${var2}

Read the transformer documentation for more details on configuring your own custom template.

New transformer NormalizeComments (#290)
-----------------------------------------

``NormalizeComments`` handles comments formatting. For now, it only focuses on fixing ``missing-space-after-comment``
rule violations from the Robocop::

    *** Settings ***
    #linecomment
    ### header


    *** Keywords ***
    Keyword
        Step  #comment

will be transformed to::

    *** Settings ***
    # linecomment
    ### header


    *** Keywords ***
    Keyword
        Step  # comment
    ```

Group comments with settings in OrderSettings (#468)
----------------------------------------------------

``OrderSettings`` transformer adjusts the order of the settings such as ``[Arguments]`` or ``[Teardown]`` inside test,
task or keyword. Previously, it only ordered the settings and comments were not moved. Following code::

    *** Keywords ***
    Keyword
        # comment about step
        Step
        # comment about arguments
        [Arguments]    ${arg}

would result in::


    *** Keywords ***
    Keyword
        [Arguments]    ${arg}
        # comment about step
        Step
         # comment about arguments

However in most cases such comments are meant only the very next line. That's why now the comments will be moved
together with settings::

    *** Keywords ***
    Keyword
        # comment about arguments
        [Arguments]    ${arg}
        # comment about step
        Step

SplitTooLongLine and splitting single values (#436)
---------------------------------------------------

``SplitTooLongLine`` splits all too long values including single values (not lists)::

    ${SHORT_NAME}
    ...    really long value really long value really long value really long value really long value really long value

This behaviour didn't improve the readability and now single too long values will not be split. You can configure
this using ``split_single_value`` parameter (default ``False``)::

    > robotidy -c SplitTooLongLine:split_single_value=True

SplitTooLongLine and aligning new line (#484)
------------------------------------------------

It is now possible to align new line to previous line when splitting too long line. This mode works only when we are
filling the line until the line length limit (with one of the ``split_on_every_arg``, ``split_on_every_value`` and
``split_on_every_setting_arg`` flags). To enable it configure it using ``align_new_line``::

    > robotidy -c SplitTooLongLine:align_new_line=True

Following code::

    *** Keywords ***
    Keyword
        [Tags]    longertagname1    longertagname2    longertagname3
        Keyword With Longer Name    ${arg1}    ${arg2}    ${arg3}    # let's assume ${arg3} does not fit under limit

with  ``align_new_line = False`` (default) is transformed to::

    *** Keywords ***
    Keyword
        [Tags]    longertagname1    longertagname2
        ...    longertagname3
        Keyword With Longer Name    ${arg1}    ${arg2}
        ...    ${arg3}

and with ``align_new_line = True`` is transformed to::

    *** Keywords ***
    Keyword
        [Tags]    longertagname1    longertagname2
        ...       longertagname3
        Keyword With Longer Name    ${arg1}    ${arg2}
        ...                         ${arg3}

Spaces in the transformer name or configuration
-------------------------------------------------

Spaces are now allowed in the transformer path or configuration value. To provide such name or value
enclose it with quotation marks::

    > robotidy --load-transformer "C:\\My Transformers\\Transformer.py"
    > robotidy --configure CustomTransformer:value="param value"

Bugs
-----

- Keyword name will no longer be prefixed with continuation marks (``...``) if name was longer than line length limit (#494)
- It is now safe to use Tasks sections with ``MergeAndOrderSections`` transformer with Robot Framework 6.0+ (#490)
- Test case titles are now capitalized with ``RenameTestCases:capitalize_each_word=True`` even if the word is inside brackets (#485)
- It is now possible to use disabler in the first line and enable it later (previously the whole file was always ignored) (#479)::

    # robotidy: off
    # robotidy: on
    *** Settings ***
